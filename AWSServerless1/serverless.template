{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Transform" : "AWS::Serverless-2016-10-31",
  "Description" : "An AWS Serverless Application that uses the ASP.NET Core framework running in Amazon Lambda.",

  "Parameters" : {
    "ShouldCreateBucket" : {
      "Type" : "String",        
      "AllowedValues" : ["true", "false"],
      "Description" : "If true then the S3 bucket that will be proxied will be created with the CloudFormation stack."
    },  
    "BucketName" : {
        "Type" : "String",
        "Description" : "Name of S3 bucket that will be proxied. If left blank a new table will be created.",
        "MinLength" : "0"
    },
    "CognitoUserPoolId" : {
      "Type" : "String",
      "Description" : "Name of S3 bucket that will be proxied. If left blank a new table will be created.",
      "MinLength" : "0"
    },
	"CognitoClientId": {
      "Type" : "String",
      "Description" : "Client Id associated with Cognito User Pool",
      "MinLength" : "0"
    },
	"CognitoRegion": {
      "Type" : "String",
      "Description" : "Region associated with Cognito User Pool",
      "MinLength" : "0"
    },
    "ShouldCreateTable" : {
      "Type" : "String",        
      "AllowedValues" : ["true", "false"],
      "Description" : "If true then the DynamoDB blogging table will be created with the CloudFormation stack."
    },  
    "UserTableName" : {
        "Type" : "String",
        "Description" : "Name of DynamoDB table used to store the blog post. If left blank a new table will be created.",
        "MinLength" : "0"
    },
    "ReadCapacity" : {
        "Type" : "Number",
        "Description" : "Read capacity for the DynamoDB blog table.",
        "Default" : "3",
        "MinValue" : 1
    },
    "WriteCapacity" : {
        "Type" : "Number",
        "Description" : "Write capacity for the DynamoDB blog table.",
        "Default" : "3",
        "MinValue" : 1
    }
  },

  "Conditions" : {
    "CreateUserTable" : {"Fn::Equals" : [{"Ref" : "ShouldCreateTable"}, "true"]},
	  "TableNameGenerated" : {"Fn::Equals" : [{"Ref" : "UserTableName"}, ""]},
    "CreateS3Bucket" : {"Fn::Equals" : [{"Ref" : "ShouldCreateBucket"}, "true"]},
    "BucketNameGenerated" : {"Fn::Equals" : [{"Ref" : "BucketName"}, ""]}
  },

  "Resources" : {


	"Post" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "AWSServerlessWebApi::AWSServerlessWebApi.LambdaEntryPoint::FunctionHandlerAsync",
        "Runtime": "dotnetcore2.0",
        "CodeUri": "",
        "Description": "Function to register a user",
        "MemorySize": 256,
        "Timeout": 30,
        "Role": null,
        "Policies": [ "AWSLambdaFullAccess" ],
        "Environment" : {
          "Variables" : {
            "UserPoolId" : {"Ref" : "CognitoUserPoolId"  },
			"ClientId" : {"Ref" : "CognitoClientId"  },
			"Region": {"Ref" : "CognitoRegion"  }
          }
        },
        "Events": {
          "PostResource": {
            "Type": "Api",
            "Properties": {
              "Path": "/api/register",
              "Method": "POST"
            }
          }
        }
      }
    },

	"UserTable" : {
        "Type" : "AWS::DynamoDB::Table",
        "Condition" : "CreateUserTable",
        "Properties" : {
            "TableName" : { "Fn::If" : ["TableNameGenerated", {"Ref" : "AWS::NoValue" }, { "Ref" : "UserTableName" } ] },
            "AttributeDefinitions" : [
              {"AttributeName" : "Id", "AttributeType" : "S"}
            ],
            "KeySchema"            : [
              {"AttributeName" : "Id", "KeyType" : "HASH"}
            ],
            "ProvisionedThroughput" : {
                "ReadCapacityUnits" : { "Ref" : "ReadCapacity" },
                "WriteCapacityUnits" : { "Ref" : "WriteCapacity" }
            }
        }
	},

    "Bucket" : {
        "Type" : "AWS::S3::Bucket",
        "Condition" : "CreateS3Bucket",
        "Properties" : {
            "BucketName" : { "Fn::If" : ["BucketNameGenerated", {"Ref" : "AWS::NoValue" }, { "Ref" : "BucketName" } ] }
        }
    }

  },

  "Outputs" : {
    "S3ProxyBucket" : {
        "Value" : { "Fn::If" : ["CreateS3Bucket", {"Ref":"Bucket"}, { "Ref" : "BucketName" } ] }
    }
  }
}